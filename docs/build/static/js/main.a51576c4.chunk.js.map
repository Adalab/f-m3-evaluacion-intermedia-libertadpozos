{"version":3,"sources":["component/List.js","App.js","serviceWorker.js","index.js"],"names":["List","pokemon","this","props","console","log","react_default","a","createElement","className","map","item","name","src","url","alt","types","type","React","Component","id","evolution","App","component_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiCeA,mLA9BP,IACGC,EAASC,KAAKC,MAAdF,QAEP,OADAG,QAAQC,IAAIJ,GAERK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,qBACCF,EAAAC,EAAAC,cAAA,UACEP,EAAQS,IAAI,SAAAC,GACX,OACEL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKG,EAAKC,MACVN,EAAAC,EAAAC,cAAA,OAAKK,IAAKF,EAAKG,IAAKC,IAAI,YACxBT,EAAAC,EAAAC,cAAA,UACGG,EAAKK,MAAMN,IAAI,SAAAO,GACd,OACEX,EAAAC,EAAAC,cAAA,UAAKS,kBAhBVC,IAAMC,WCEnBlB,SAAU,CACd,CAACmB,GAAK,EAAER,KAAO,YAAYI,MAAQ,CAAC,SAAS,SAASK,UAAY,KAAKP,IAAM,kFAC7E,CAACM,GAAK,EAAER,KAAO,UAAUI,MAAQ,CAAC,SAAS,SAASK,UAAY,YAAYP,IAAM,kFAClF,CAACM,GAAK,EAAER,KAAO,WAAWI,MAAQ,CAAC,SAAS,SAASK,UAAY,UAAUP,IAAM,kFACjF,CAACM,GAAK,EAAER,KAAO,aAAaI,MAAQ,CAAC,QAAQK,UAAY,KAAKP,IAAM,kFACpE,CAACM,GAAK,EAAER,KAAO,aAAaI,MAAQ,CAAC,QAAQK,UAAY,aAAaP,IAAM,kFAC5E,CAACM,GAAK,EAAER,KAAO,YAAYI,MAAQ,CAAC,SAAS,QAAQK,UAAY,aAAaP,IAAM,kFACpF,CAACM,GAAK,EAAER,KAAO,WAAWI,MAAQ,CAAC,SAASK,UAAY,KAAKP,IAAM,kFACnE,CAACM,GAAK,EAAER,KAAO,YAAYI,MAAQ,CAAC,SAASK,UAAY,WAAWP,IAAM,kFAC1E,CAACM,GAAK,EAAER,KAAO,YAAYI,MAAQ,CAAC,SAASK,UAAY,YAAYP,IAAM,kFAC3E,CAACM,GAAK,GAAGR,KAAO,WAAWI,MAAQ,CAAC,OAAOK,UAAY,KAAKP,IAAM,qFAWrDQ,mLANX,OACEhB,EAAAC,EAAAC,cAACe,EAAD,CAAMtB,QAASA,WAHHiB,IAAMC,WCLJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a51576c4.chunk.js","sourcesContent":["import React from \"react\";\n\nclass List extends React.Component{\nrender(){\n    const {pokemon}=this.props;\n    console.log(pokemon)\n    return(\n        <div className=\"App\">\n          <h1>Pokemon</h1>\n           <ul>\n            {pokemon.map(item=>{\n              return(\n                <li>\n                  <h2>{item.name}</h2>\n                  <img src={item.url} alt=\"pokemon\"></img>\n                  <ul>\n                    {item.types.map(type=>{\n                      return (\n                        <li>{type}</li>\n                      )\n                    }\n                    )}\n                  </ul>\n                </li>)\n            })\n            }\n          </ul>\n          </div>\n    );\n}\n\n}\n\nexport default List;","import React from \"react\";\nimport List from './component/List';\nimport \"./App.css\";\n\nconst pokemon = [\n  {\"id\":1,\"name\":\"bulbasaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"},\n  {\"id\":2,\"name\":\"ivysaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"bulbasaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png\"},\n  {\"id\":3,\"name\":\"venusaur\",\"types\":[\"poison\",\"grass\"],\"evolution\":\"ivysaur\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png\"},\n  {\"id\":4,\"name\":\"charmander\",\"types\":[\"fire\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png\"},\n  {\"id\":5,\"name\":\"charmeleon\",\"types\":[\"fire\"],\"evolution\":\"charmander\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png\"},\n  {\"id\":6,\"name\":\"charizard\",\"types\":[\"flying\",\"fire\"],\"evolution\":\"charmeleon\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png\"},\n  {\"id\":7,\"name\":\"squirtle\",\"types\":[\"water\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png\"},\n  {\"id\":8,\"name\":\"wartortle\",\"types\":[\"water\"],\"evolution\":\"squirtle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png\"},\n  {\"id\":9,\"name\":\"blastoise\",\"types\":[\"water\"],\"evolution\":\"wartortle\",\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png\"},\n  {\"id\":10,\"name\":\"caterpie\",\"types\":[\"bug\"],\"evolution\":null,\"url\":\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png\"}\n];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <List pokemon={pokemon} />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}